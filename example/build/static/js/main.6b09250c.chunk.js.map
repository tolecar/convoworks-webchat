{"version":3,"sources":["../../src/components/messages/Message.jsx","../../src/components/messages/MessageGroup.jsx","../../src/assets/icons/IconSend.jsx","../../src/components/ConvoChat.jsx","../../src/index.js","App.js","index.js"],"names":["Message","props","useState","useEffect","setTimeout","setVisible","curtop","obj","findPos","className","MessageGroup","type","text","scrollArea","scrollAnchor","key","timeout","IconSend","xmlns","width","height","viewBox","fill","stroke","stroke-width","stroke-linecap","stroke-linejoin","class","x1","y1","x2","y2","points","ConvoChat","serviceId","variant","isLaunch","mainInput","useRef","setDeviceId","onClick","setChatVisible","chatVisible","ref","messageGroups","item","text_responses","onSubmit","e","message","url","convoPublicApiBaseUrl","data","device_id","lunch","axios","method","res","setMessageGroups","setMessage","err","console","sendMessage","defaultValue","placeholder","onChange","ConvoChatComponent","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b09250c.chunk.js","sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'\n\nfunction Message(props) {\n\tconst [visible, setVisible] = useState(false);\n\n\t//Finds y value of given object\n\tfunction findPos(obj) {\n\t\tvar curtop = 0;\n\t\tif (obj.offsetParent) {\n\t\t\tdo {\n\t\t\t\tcurtop += obj.offsetTop;\n\t\t\t} while ((obj = obj.offsetParent));\n\t\t\treturn [curtop];\n\t\t}\n\t}\n\n\t// scroll to bottom of the chatbox when a message is sent\n\tfunction handleScroll() {\n\t\tprops.scrollArea.current.scroll(0, findPos(props.scrollAnchor.current));\n\t}\n\n\tuseEffect(() => {\n\t\tif (props.timeout) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetVisible(true);\n\t\t\t}, [props.timeout])\n\t\t} else {\n\t\t\tsetVisible(true)\n\t\t}\n\t}, [props]);\n\n\tuseEffect(() => {\n\t\thandleScroll();\n\t}, [visible])\n\n\tif (visible) {\n\t\treturn (\n\t\t\t<div className={props.type === 'response' ? 'message message--response' : 'message message--user'}>\n\t\t\t\t<div className=\"message__inner\">{props.text}</div>\n\t\t\t</div>\n\t\t)\n\t} else {\n\t\treturn null\n\t}\n}\n\nexport default Message\n","import React, { useEffect } from 'react'\nimport Message from './Message'\n\nfunction MessageGroup(props) {\n  const handleResponses = (items) => {\n    return items.map((item, index) => {\n      return <Message type={'response'} text={item} key={index} timeout={600} scrollArea={props.scrollArea} scrollAnchor={props.scrollAnchor} />\n    })\n  }\n\n  return (\n    <React.Fragment>\n      <Message type={''} text={props.text} scrollArea={props.scrollArea} scrollAnchor={props.scrollAnchor} />\n      {handleResponses(props.text_responses)}\n    </React.Fragment>\n  )\n}\n\nexport default MessageGroup\n","import React from 'react'\n\nfunction IconSend() {\n\treturn (\n\t\t<div className=\"icon\">\n\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-send\"><line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line><polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon></svg>\n\t\t</div>\n\t)\n}\n\nexport default IconSend\n","import React from \"react\";\nimport \"./convo_chat.scss\";\nimport { useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport MessageGroup from \"./messages/MessageGroup\";\nimport IconSend from \"../assets/icons/IconSend\";\nimport { useEffect } from \"react\";\n\nconst ConvoChat = (props) => {\n\t//State params\n\tconst [message, setMessage] = useState(\"\");\n\tconst [messageGroups, setMessageGroups] = useState([]);\n\tconst [chatVisible, setChatVisible] = useState(true);\n\tconst [deviceId, setDeviceId] = useState(null);\n\n\t// Props \n\tconst serviceId = props.serviceId;\n\tconst variant = props.variant;\n\tconst isLaunch = props.isLaunch;\n\n\t//Refs\n\tconst mainInput = useRef(null);\n\tconst scrollArea = useRef(null);\n\tconst scrollAnchor = useRef(null);\n\n\t//Api Routes\n\tconst convoPublicApiBaseUrl = `http://localhost:9090/rest_public/convo/v1`;\n\n\tuseEffect(() => {\n\t\tsetDeviceId('device');\n\t}, [])\n\n\t// handle message submit \n\tfunction sendMessage(text) {\n\t\tif (!variant) {\n\t\t\tvariant = \"develop\";\n\t\t}\n\n\t\t// request variables\n\t\tconst url = convoPublicApiBaseUrl + \"/service-run/webchat/\" + variant + \"/\" + serviceId;\n\t\tconst data = { device_id: deviceId, text: text, lunch: isLaunch };\n\n\t\t// post request \n\t\taxios({ method: \"post\", url: url, data: data })\n\t\t\t.then((res) => {\n\t\t\t\tsetMessageGroups([\n\t\t\t\t\t...messageGroups,\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: message,\n\t\t\t\t\t\ttext_responses: res.data.text_responses,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t\tsetMessage(null);\n\t\t\t\tmainInput.current.value = \"\";\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t}\n\n\treturn (\n\t\t<div className=\"convo-chat\">\n\t\t\t<header\n\t\t\t\tclass=\"convo-chat__header\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetChatVisible(!chatVisible);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tChat\n\t\t\t</header>\n\t\t\t{chatVisible && (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<div className=\"convo-chat__body\" ref={scrollArea}>\n\t\t\t\t\t\t{messageGroups.map((item, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<MessageGroup\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\ttext={item.text}\n\t\t\t\t\t\t\t\t\ttext_responses={item.text_responses}\n\t\t\t\t\t\t\t\t\tscrollArea={scrollArea}\n\t\t\t\t\t\t\t\t\tscrollAnchor={scrollAnchor}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"convo-chat__anchor\"\n\t\t\t\t\t\t\tref={scrollAnchor}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<form\n\t\t\t\t\t\tclassName=\"convo-chat__form\"\n\t\t\t\t\t\tonSubmit={(e) => {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tmessage &&\n\t\t\t\t\t\t\t\tsendMessage(\n\t\t\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tref={mainInput}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tdefaultValue={\"\"}\n\t\t\t\t\t\t\tplaceholder=\"Type a message\"\n\t\t\t\t\t\t\tonChange={(e) => setMessage(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button type=\"submit\">\n\t\t\t\t\t\t\t<IconSend />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default ConvoChat;\n","import React from 'react'\nimport ConvoChat from './components/ConvoChat'\n//import styles from './styles.module.css'\n\nexport const ConvoChatComponent = () => {\n\treturn <ConvoChat serviceId='servis' variant='b' isLaunch={false} />\n}\n","import React from 'react'\n\nimport 'convo-chat/dist/index.css'\nimport { ConvoChatComponent } from 'convo-chat'\n\nconst App = () => {\n  return <ConvoChatComponent />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}